#!/bin/bash

# Park N Joy APK Build Script - Fixed Version
# This script builds the Android APK with proper environment detection

echo "🚀 Starting Park N Joy APK Build Process (Fixed)..."

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo "❌ Error: Please run this script from the project root directory"
    exit 1
fi

# Install Node.js dependencies to ensure Capacitor CLI can identify the project
echo "📦 Installing Node.js dependencies..."
npm install

if [ $? -ne 0 ]; then
    echo "❌ Failed to install Node.js dependencies"
    exit 1
fi

# Function to detect Android SDK path
detect_android_sdk() {
    local sdk_path=""
    
    # Check common SDK locations
    if [ -d "$HOME/Android/Sdk" ]; then
        sdk_path="$HOME/Android/Sdk"
    elif [ -d "$HOME/Library/Android/sdk" ]; then
        sdk_path="$HOME/Library/Android/sdk"
    elif [ -d "/data/data/com.termux/files/home/android-sdk" ]; then
        sdk_path="/data/data/com.termux/files/home/android-sdk"
    elif [ -d "$ANDROID_HOME" ]; then
        sdk_path="$ANDROID_HOME"
    elif [ -d "$ANDROID_SDK_ROOT" ]; then
        sdk_path="$ANDROID_SDK_ROOT"
    else
        echo "⚠️  Warning: Android SDK not found in common locations"
        echo "Please set ANDROID_HOME or ANDROID_SDK_ROOT environment variable"
        sdk_path="/opt/android-sdk-linux"  # Fallback
    fi
    
    echo "$sdk_path"
}

# Function to detect Java path
detect_java_path() {
    local java_path=""
    
    if [ -n "$JAVA_HOME" ]; then
        java_path="$JAVA_HOME"
    elif [ -d "/usr/lib/jvm/java-17-openjdk" ]; then
        java_path="/usr/lib/jvm/java-17-openjdk"
    elif [ -d "/usr/lib/jvm/java-17-openjdk-amd64" ]; then
        java_path="/usr/lib/jvm/java-17-openjdk-amd64"
    elif [ -d "/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home" ]; then
        java_path="/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home"
    elif [ -d "/data/data/com.termux/files/usr/lib/jvm/java-17-openjdk" ]; then
        java_path="/data/data/com.termux/files/usr/lib/jvm/java-17-openjdk"
    else
        java_path=$(dirname $(dirname $(readlink -f $(which java))))
    fi
    
    echo "$java_path"
}

# Detect environment
echo "🔍 Detecting build environment..."
ANDROID_SDK_PATH=$(detect_android_sdk)
JAVA_PATH=$(detect_java_path)

echo "📍 Android SDK: $ANDROID_SDK_PATH"
echo "☕ Java Home: $JAVA_PATH"

# Update local.properties with detected paths
echo "📝 Updating local.properties..."
cat > android/local.properties << EOF
# Auto-generated by build script
sdk.dir=$ANDROID_SDK_PATH
org.gradle.java.home=$JAVA_PATH

# Gradle optimization settings
org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.daemon=false
android.useAndroidX=true
android.enableJetifier=true
EOF

# Create debug keystore if it doesn't exist
echo "🔐 Checking debug keystore..."
if [ ! -f "android/app/debug.keystore" ]; then
    echo "🔑 Creating debug keystore..."
    "$JAVA_PATH/bin/keytool" -genkey -v -keystore android/app/debug.keystore \
        -storepass android -alias androiddebugkey -keypass android \
        -keyalg RSA -keysize 2048 -validity 10000 \
        -dname "CN=Android Debug,O=Android,C=US" 2>/dev/null || {
        echo "⚠️  Warning: Could not create keystore with keytool at $JAVA_PATH/bin/keytool, using alternative method..."
        # Create a basic keystore file
        touch android/app/debug.keystore
    }
fi

# Build web assets first
echo "📦 Building web assets..."
npm run build

if [ $? -ne 0 ]; then
    echo "❌ Web build failed"
    exit 1
fi

# Sync Capacitor
echo "🔄 Syncing Capacitor..."

# Check if android directory exists, if not add the platform
if [ ! -d "android" ]; then
    echo "📱 Android platform not found. Adding Android platform..."
    # Remove any existing android directory to ensure clean state
    rm -rf android
    npx cap add android
    
    if [ $? -ne 0 ]; then
        echo "❌ Failed to add Android platform"
        exit 1
    fi
    echo "✅ Android platform added successfully"
fi

npx cap sync android

if [ $? -ne 0 ]; then
    echo "❌ Capacitor sync failed"
    exit 1
fi

# Navigate to android directory
cd android

# Make gradlew executable
chmod +x gradlew

# Create output directories
echo "📁 Creating output directories..."
mkdir -p app/build/outputs/apk/debug

# Clean previous builds
echo "🧹 Cleaning previous builds..."
./gradlew clean --no-daemon

# Build debug APK with detailed logging
echo "🔨 Building debug APK..."
./gradlew assembleDebug --no-daemon --stacktrace --info

# Ensure output directory exists and copy APK if needed
echo "📁 Ensuring APK output directory..."
mkdir -p app/build/outputs/apk/debug/

# Find and copy any generated APKs to the standard location
echo "🔍 Finding and organizing APK files..."
find . -name "*.apk" -exec cp {} app/build/outputs/apk/debug/ \;

# Print all APK locations for debugging
echo "📋 All generated APK paths:"
find . -name "*.apk"

# Verify the target APK exists
TARGET_APK="app/build/outputs/apk/debug/app-debug.apk"
if [ -f "$TARGET_APK" ]; then
    echo "✅ Target APK found: $TARGET_APK"
    echo "📏 APK size: $(du -h "$TARGET_APK" | cut -f1)"
else
    echo "❌ Target APK not found at: $TARGET_APK"
    echo "📂 Available APKs in debug directory:"
    ls -la app/build/outputs/apk/debug/ 2>/dev/null || echo "Directory does not exist"
fi

# Check if APK was generated
APK_PATH="app/build/outputs/apk/debug"
if [ -d "$APK_PATH" ]; then
    APK_FILES=$(find "$APK_PATH" -name "*.apk" -type f)
    if [ -n "$APK_FILES" ]; then
        echo "✅ APK Build Successful!"
        echo "📱 Generated APK files:"
        for apk in $APK_FILES; do
            echo "   📁 $(basename "$apk") ($(du -h "$apk" | cut -f1))"
            echo "   🔗 Full path: $(realpath "$apk")"
        done
        
        # Copy APK to project root for easy access
        MAIN_APK=$(find "$APK_PATH" -name "*.apk" -type f | head -1)
        if [ -n "$MAIN_APK" ]; then
            cp "$MAIN_APK" "../park-n-joy-debug.apk"
            echo "📋 APK copied to project root as: park-n-joy-debug.apk"
            echo ""
            echo "🎉 SUCCESS! APK is ready for installation:"
            echo "   📱 Install command: adb install park-n-joy-debug.apk"
            echo "   📁 APK location: $(pwd)/../park-n-joy-debug.apk"
            echo "   📏 APK size: $(du -h "../park-n-joy-debug.apk" | cut -f1)"
        fi
    else
        echo "❌ No APK files found in $APK_PATH"
        echo "📂 Directory contents:"
        ls -la "$APK_PATH" 2>/dev/null || echo "Directory does not exist"
        exit 1
    fi
else
    echo "❌ APK output directory not found: $APK_PATH"
    echo "📂 Available build outputs:"
    find app/build -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
    exit 1
fi

echo ""
echo "🎉 Build process completed successfully!"
echo "📱 Your Park N Joy APK is ready for testing!"